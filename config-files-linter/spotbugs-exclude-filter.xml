<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter
  xmlns="https://github.com/spotbugs/filter/4.8.4"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://github.com/spotbugs/filter/4.8.4 https://raw.githubusercontent.com/spotbugs/spotbugs/4.8.4/spotbugs/etc/findbugsfilter.xsd">

  <Match>
    <!-- SpotBugs で意図的に検出するためのコードなので、通常は除外しておき、実験のときだけ外す。 -->
    <Class name="make.findbugs.angry.Buggy1" />
  </Match>

  <Match>
    <!-- SpotBugs で意図的に検出するためのコードなので、通常は除外しておき、実験のときだけ外す。 -->
    <Class name="make.findbugs.angry.DummyBuggy1" />
  </Match>

  <Match>
    <!-- JMHが生成したコードは除外する。 -->
    <Class name="~.*\.jmh\..*\.generated\..*" />
  </Match>

  <Match>
    <!-- OJCP 関連は意図的に不自然なサンプルコードを含むことがあるので、全体的に除外する。 -->
    <Class name="~javasnack\.ojcp\..*" />
  </Match>

  <!--
  このプロジェクトでは実験/テスト用にDBを扱うため、パスワードを空に設定する。
  そのため、DB接続パスワードが空である指摘については指摘されても実際にはセキュリティ上の問題にならないため、
  指摘パターン自体をまるごと除外しておく。(実プロダクトでは除外すべきではない)
   -->
  <Match>
    <Bug pattern="DMI_EMPTY_DB_PASSWORD" />
  </Match>

  <!--
  このプロジェクトでは実験/テスト用に Random クラスを扱うため、1度使って終わりのコードが多い。
  DMI_RANDOM_USED_ONLY_ONCE で警告されてしまうため、指摘パターン自体をまるごと除外しておく。(実プロダクトでは除外すべきではない)
  -->
  <Match>
    <Bug pattern="DMI_RANDOM_USED_ONLY_ONCE" />
  </Match>

  <!-- コードの意図として指摘されても問題ないため、以下の指摘は除外する。 -->
  <Match>
    <Class name="javasnack.langspecs.TestClassIsAssignableFrom" />
    <Method name="testInstanceOfOp" />
    <Bug pattern="BC_IMPOSSIBLE_INSTANCEOF" />
  </Match>

  <Match>
    <Class name="javasnack.reflection.TestClassMetaInfo" />
    <Method name="testAssignableFrom" />
    <Bug pattern="BC_IMPOSSIBLE_INSTANCEOF" />
  </Match>

  <Match>
    <Class name="javasnack.snacks.jmh.samples.JmhSamples09Blackholes" />
    <Method name="measureWrong" />
    <Bug pattern="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.generics.TestGenericsHellAdventCalendarDemo" />
    <Method name="testTypeParameterDeclarationDemo" />
    <Bug pattern="DLS_DEAD_LOCAL_STORE" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.generics.TestGenericsViaEffectiveJavaChapter5" />
    <Method name="testItem31StackDemo" />
    <Bug pattern="DLS_DEAD_LOCAL_STORE" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.generics.TestGenericsHellAdventCalendarDemo" />
    <Method name="testBasicCovarianceForReferenceType" />
    <Bug pattern="BC_IMPOSSIBLE_INSTANCEOF" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.TestStringFormat" />
    <Method name="lambda$expandStrings$0" />
    <Bug pattern="RV_RETURN_VALUE_IGNORED" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.TestStringFormat" />
    <Method name="lambda$expandNumbersButStringGiven$1" />
    <Bug pattern="RV_RETURN_VALUE_IGNORED" />
  </Match>

  <Match>
    <Class name="javasnack.langspecs.TestStringFormat" />
    <Method name="lambda$expandDateTime$2" />
    <Bug pattern="RV_RETURN_VALUE_IGNORED" />
  </Match>

  <!-- コードではnullチェックしていないのに、なぜか冗長なnullチェックとして検出された (1) -->
  <Match>
    <Class name="javasnack.classgraph.TestClassGraphDemo" />
    <Method name="testScanClassesDemo" />
    <Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE" />
  </Match>

  <!-- コードではnullチェックしていないのに、なぜか冗長なnullチェックとして検出された (1) -->
  <Match>
    <Class name="javasnack.Main" />
    <Method name="main" />
    <Bug pattern="RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE" />
  </Match>

</FindBugsFilter>