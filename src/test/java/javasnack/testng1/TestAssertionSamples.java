package javasnack.testng1;

import static org.testng.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import org.testng.annotations.Test;

public class TestAssertionSamples {
    @Test
    public void assertSimples() {
        assertTrue(true);
        byte ab = 1;
        assertEquals(ab, 1);
        short as = 10;
        assertEquals(as, 10);
        int ai = 10;
        assertEquals(ai, 10);
        long al = 1000L;
        assertEquals(al, 1000L);
        float af = 100.0f;
        assertEquals(af, 100.0f);
        double ad = 100.0;
        assertEquals(ad, 100.0);

        char ac = 'a';
        assertEquals(ac, 'a');
        String astr = "Actual String";
        assertEquals(astr, "Actual String");
    }

    /**
     * Bean for Arrays/Collection test samples. hashCode(), equals() are generated by Eclipse.
     */
    class BeanSample1 {
        @Override
        public String toString() {
            return "BeanSample1 [name=" + name + ", age=" + age + ", active="
                    + active + "]";
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + getOuterType().hashCode();
            result = prime * result + (active ? 1231 : 1237);
            result = prime * result + age;
            result = prime * result + ((name == null) ? 0 : name.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            BeanSample1 other = (BeanSample1) obj;
            if (!getOuterType().equals(other.getOuterType()))
                return false;
            if (active != other.active)
                return false;
            if (age != other.age)
                return false;
            if (name == null) {
                if (other.name != null)
                    return false;
            } else if (!name.equals(other.name))
                return false;
            return true;
        }

        public BeanSample1(String theName, int theAge, boolean theActive) {
            this.name = theName;
            this.age = theAge;
            this.active = theActive;
        }

        String name;
        int age;
        boolean active;

        private TestAssertionSamples getOuterType() {
            return TestAssertionSamples.this;
        }
    }

    class CompositeBeanSample1 {

        @Override
        public String toString() {
            return "CompositeBeanSample1 [child=" + child + ", leftBean="
                    + leftBean + ", rightBean=" + rightBean + "]";
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + getOuterType().hashCode();
            result = prime * result + ((child == null) ? 0 : child.hashCode());
            result = prime * result
                    + ((leftBean == null) ? 0 : leftBean.hashCode());
            result = prime * result
                    + ((rightBean == null) ? 0 : rightBean.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            CompositeBeanSample1 other = (CompositeBeanSample1) obj;
            if (!getOuterType().equals(other.getOuterType()))
                return false;
            if (child == null) {
                if (other.child != null)
                    return false;
            } else if (!child.equals(other.child))
                return false;
            if (leftBean == null) {
                if (other.leftBean != null)
                    return false;
            } else if (!leftBean.equals(other.leftBean))
                return false;
            if (rightBean == null) {
                if (other.rightBean != null)
                    return false;
            } else if (!rightBean.equals(other.rightBean))
                return false;
            return true;
        }

        CompositeBeanSample1 child;
        BeanSample1 leftBean;
        BeanSample1 rightBean;

        public CompositeBeanSample1(CompositeBeanSample1 theChild,
                BeanSample1 theLeftBean, BeanSample1 theRightBean) {
            this.child = theChild;
            this.leftBean = theLeftBean;
            this.rightBean = theRightBean;
        }

        private TestAssertionSamples getOuterType() {
            return TestAssertionSamples.this;
        }
    }

    public CompositeBeanSample1 buildNewComposition4Actual() {
        BeanSample1 b11 = new BeanSample1("abc", 11, true);
        BeanSample1 b12 = new BeanSample1("abc", 12, true);
        BeanSample1 b13 = new BeanSample1("abc", 13, true);
        BeanSample1 b14 = new BeanSample1("abc", 14, true);
        BeanSample1 b15 = new BeanSample1("abc", 15, true);
        BeanSample1 b16 = new BeanSample1("abc", 16, true);
        CompositeBeanSample1 cb11 = new CompositeBeanSample1(null, b11, b12);
        CompositeBeanSample1 cb12 = new CompositeBeanSample1(cb11, b13, b14);
        CompositeBeanSample1 r = new CompositeBeanSample1(cb12, b15, b16);
        return r;
    }

    public CompositeBeanSample1 buildNewComposition4Expected() {
        BeanSample1 b11 = new BeanSample1("abc", 11, true);
        BeanSample1 b12 = new BeanSample1("abc", 12, true);
        BeanSample1 b13 = new BeanSample1("abc", 13, true);
        BeanSample1 b14 = new BeanSample1("abc", 14, true);
        BeanSample1 b15 = new BeanSample1("abc", 15, true);
        BeanSample1 b16 = new BeanSample1("abc", 16, true);
        CompositeBeanSample1 cb11 = new CompositeBeanSample1(null, b11, b12);
        CompositeBeanSample1 cb12 = new CompositeBeanSample1(cb11, b13, b14);
        CompositeBeanSample1 r = new CompositeBeanSample1(cb12, b15, b16);
        return r;
    }

    @Test
    public void assertBeanSamples() {
        BeanSample1 ab1 = new BeanSample1("Abc", 10, true);
        BeanSample1 eb1 = new BeanSample1("Abc", 10, true);
        assertEquals(ab1, eb1);

        CompositeBeanSample1 acbs1 = buildNewComposition4Actual();
        CompositeBeanSample1 ecbs1 = buildNewComposition4Expected();
        assertEquals(acbs1, ecbs1);
    }

    @Test
    public void assertArraySamples() {
        byte[] abarr = { 1, 2, 3 };
        byte[] ebarr = { 1, 2, 3 };
        assertEquals(abarr, ebarr);

        String[] astrarr = { "abc", "def", "ghi" };
        String[] estrarr = { "abc", "def", "ghi" };
        assertEquals(astrarr, estrarr);

        BeanSample1 ab1 = new BeanSample1("Abc", 10, true);
        BeanSample1 ab2 = new BeanSample1("Def", 20, false);
        BeanSample1 eb1 = new BeanSample1("Abc", 10, true);
        BeanSample1 eb2 = new BeanSample1("Def", 20, false);
        BeanSample1[] abs1arr = { ab1, ab2 };
        BeanSample1[] ebs1arr = { eb1, eb2 };
        assertEquals(abs1arr, ebs1arr);
    }

    @Test
    public void assertOrderedCollectionSamples() {
        ArrayList<String> asarr = new ArrayList<String>(Arrays.asList("abc",
                "def", "ghi", "jkl"));
        ArrayList<String> esarr = new ArrayList<String>(Arrays.asList("abc",
                "def", "ghi", "jkl"));
        assertEquals(asarr, esarr);

        ArrayList<BeanSample1> abs1arr = new ArrayList<BeanSample1>();
        abs1arr.add(new BeanSample1("abc", 10, true));
        abs1arr.add(new BeanSample1("def", 20, false));
        ArrayList<BeanSample1> ebs1arr = new ArrayList<BeanSample1>();
        ebs1arr.add(new BeanSample1("abc", 10, true));
        ebs1arr.add(new BeanSample1("def", 20, false));
        assertEquals(abs1arr, ebs1arr);
    }

    @Test
    public void assertUnorderedArraySamples() {
        ArrayList<String> asarr = new ArrayList<String>(Arrays.asList("abc",
                "def", "ghi", "jkl"));
        ArrayList<String> esarr = new ArrayList<String>(Arrays.asList("def",
                "ghi", "jkl", "abc"));
        assertEqualsNoOrder(asarr.toArray(), esarr.toArray());

        ArrayList<BeanSample1> abs1arr = new ArrayList<BeanSample1>();
        abs1arr.add(new BeanSample1("abc", 10, true));
        abs1arr.add(new BeanSample1("def", 20, false));
        ArrayList<BeanSample1> ebs1arr = new ArrayList<BeanSample1>();
        ebs1arr.add(new BeanSample1("def", 20, false));
        ebs1arr.add(new BeanSample1("abc", 10, true));
        assertEqualsNoOrder(abs1arr.toArray(), ebs1arr.toArray());
    }

    @Test
    public void assertSetSamples() {
        Set<String> asset = new HashSet<String>(Arrays.asList("abc", "def",
                "ghi", "jkl"));
        Set<String> esset = new HashSet<String>(Arrays.asList("def", "ghi",
                "jkl", "abc"));
        assertEquals(asset, esset);

        Set<BeanSample1> abs1set = new HashSet<BeanSample1>();
        abs1set.add(new BeanSample1("abc", 10, true));
        abs1set.add(new BeanSample1("def", 20, false));
        Set<BeanSample1> ebs1set = new HashSet<BeanSample1>();
        ebs1set.add(new BeanSample1("def", 20, false));
        ebs1set.add(new BeanSample1("abc", 10, true));
        assertEquals(abs1set, ebs1set);
    }

    @Test
    public void assertMapSamples() {
        // simple map
        Map<String, String> assm1 = new HashMap<String, String>();
        assm1.put("key1", "value1");
        assm1.put("key2", "value2");
        Map<String, String> essm1 = new HashMap<String, String>();
        essm1.put("key2", "value2");
        essm1.put("key1", "value1");
        assertEquals(assm1, essm1);

        // map of map
        Map<String, String> assm21 = new HashMap<String, String>();
        assm21.put("key1", "value1");
        assm21.put("key2", "value2");
        Map<String, String> assm22 = new HashMap<String, String>();
        assm22.put("key3", "value3");
        assm22.put("key4", "value4");
        Map<String, Map<String, String>> assm2 = new LinkedHashMap<String, Map<String, String>>();
        assm2.put("key5", assm21);
        assm2.put("key6", assm22);
        Map<String, String> essm21 = new HashMap<String, String>();
        essm21.put("key2", "value2");
        essm21.put("key1", "value1");
        Map<String, String> essm22 = new HashMap<String, String>();
        essm22.put("key4", "value4");
        essm22.put("key3", "value3");
        Map<String, Map<String, String>> essm2 = new LinkedHashMap<String, Map<String, String>>();
        essm2.put("key6", essm22);
        essm2.put("key5", essm21);
        assertEquals(assm2, essm2);

        // map of beans
        Map<String, BeanSample1> abs1m1 = new HashMap<String, BeanSample1>();
        abs1m1.put("key1", new BeanSample1("abc", 10, true));
        abs1m1.put("key2", new BeanSample1("def", 20, false));
        Map<String, BeanSample1> ebs1m1 = new LinkedHashMap<String, BeanSample1>();
        ebs1m1.put("key2", new BeanSample1("def", 20, false));
        ebs1m1.put("key1", new BeanSample1("abc", 10, true));
        assertEquals(abs1m1, ebs1m1);
    }

    void assertCalendarYearIs(Calendar actualCalendar, int expectedYear)
            throws AssertionError {
        int actualYear = actualCalendar.get(Calendar.YEAR);
        if (actualYear != expectedYear) {
            fail(String.format("expected [%d] but found [%d] in [%s]",
                    expectedYear, actualYear, actualCalendar.toString()));
        }
    }

    @Test
    public void assertCalenderAndCustomAssertion() {
        Calendar ac = Calendar.getInstance();
        ac.set(2000, 1, 2, 3, 4, 5);
        Calendar ec = Calendar.getInstance();
        ec.set(2000, 1, 2, 3, 4, 5);
        assertEquals(ac, ec);
        assertCalendarYearIs(ac, 2000);
    }
}
